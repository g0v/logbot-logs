--- Day changed 三  2月 13 2013
00:01 -!- swem [~Thunderbi@36-226-20-110.dynamic-ip.hinet.net] has joined #g0v.tw
00:28 < kcwu> 發現 http://msdl.sourceforge.net/ 可以會把後半一起抓下來, 但 ffmpeg 播完前半就停了
00:28 < kcwu> kcwu's url: [msdl project web site]
00:30 < clkao> kcwu++
00:31 < clkao> 之前有試過 mmsrip
00:31 < clkao> 顯然未夠班
01:00 -!- swem [~Thunderbi@36-226-20-110.dynamic-ip.hinet.net] has quit [Ping timeout: 252 seconds]
01:17 < favonia> clkao: 感覺應該直接把廣韻拿來 pasre
01:26 -!- lxb [cbc2808e@gateway/web/freenode/ip.203.194.128.142] has joined #g0v.tw
01:27 -!- favonia [~favonia@pdpc/supporter/student/favonia] has quit [Ping timeout: 246 seconds]
01:30 -!- lxb [cbc2808e@gateway/web/freenode/ip.203.194.128.142] has quit [Ping timeout: 245 seconds]
02:10 < kcwu> ivod 弄不出來, 話說若不用 live 的話, http://media.ly.gov.tw/ 這邊的影片就可以用了
02:10 < kcwu> kcwu's url: [立法委員影音資料查詢系統]
02:12 < kcwu> hmm, media.ly.gov.tw 的好像不全
02:18 -!- awaw [73508d28@gateway/web/freenode/ip.115.80.141.40] has quit [Ping timeout: 245 seconds]
03:05 -!- favonia [~favonia@pdpc/supporter/student/favonia] has joined #g0v.tw
03:29 -!- favonia [~favonia@pdpc/supporter/student/favonia] has quit [Read error: Operation timed out]
04:13 -!- favonia [~favonia@pdpc/supporter/student/favonia] has joined #g0v.tw
07:25 -!- lxb [cbc2808e@gateway/web/freenode/ip.203.194.128.142] has joined #g0v.tw
07:43 -!- lxb_ [cbc2808e@gateway/web/freenode/ip.203.194.128.142] has joined #g0v.tw
07:44 -!- lxb [cbc2808e@gateway/web/freenode/ip.203.194.128.142] has quit [Ping timeout: 245 seconds]
08:08 < favonia> miaout17: 我希望 hackpad 上新版 API 有避開之前發現的所有問題（哭）
08:23 -!- lxb_ [cbc2808e@gateway/web/freenode/ip.203.194.128.142] has quit [Ping timeout: 245 seconds]
08:29 -!- favonia [~favonia@pdpc/supporter/student/favonia] has quit [Ping timeout: 260 seconds]
09:56 -!- swem [~Thunderbi@36-226-20-206.dynamic-ip.hinet.net] has joined #g0v.tw
09:56 -!- swem [~Thunderbi@36-226-20-206.dynamic-ip.hinet.net] has quit [Client Quit]
09:57 -!- favonia [~favonia@pdpc/supporter/student/favonia] has joined #g0v.tw
10:58 -!- KNY [~Adium@36-232-95-80.dynamic-ip.hinet.net] has joined #g0v.tw
12:23  * chhsiao1981 剛剛才發現 favonia 跟 nameofevil 好像是不一樣的人? XD. 
12:32 < kcwu> tonyq__: http://files.tonyq.org/export.json 這是最新的檔案嗎? word 好像對不上內容
12:50 < favonia> chhsiao1981: lol 完全不一樣...
13:28 -!- favonia [~favonia@pdpc/supporter/student/favonia] has quit [Quit: Leaving]
13:44 -!- favonia [~favonia@pdpc/supporter/student/favonia] has joined #g0v.tw
14:08 -!- mno2 [~mno2@1.34.43.236] has joined #g0v.tw
14:15 -!- favonia [~favonia@pdpc/supporter/student/favonia] has quit [Ping timeout: 252 seconds]
14:33 < clkao> tka++ # digitalocean
14:35 < kcwu> http://www.frontier.org.tw/bongchhi/?p=20006
14:35 < kcwu> kcwu's url: [素人能不能？]
14:35 < tka_> clkao: 我覺得$5的方案拿來當 blog, vpn 超划算的, 可惜機房在紐約跟阿姆斯特丹, 離台灣有點遠
14:35 < clkao> tka_: 對 我正要說這個可惜
14:35 < clkao> 居然都 SSD
14:36 < tka_> $20 的方案, 某些狀況下 cpu 會比 linode 快一倍
14:37 < clkao> tka_: 快代理建立台灣機房吧
14:38 < tka_> clkao: 我只是 end user 呀
14:39 -!- lxb [cbc2808e@gateway/web/freenode/ip.203.194.128.142] has joined #g0v.tw
14:39 < kcwu> 整個方案成本最貴的應該就是 SSD 吧...
14:39 < lxb> 嗨，digital ocean 在亞洲的 TTL 不太好啊。
14:40 < lxb> 有興趣可以參考 http://barcamp.hk ，現在就放 digital ocean
14:40 < kcwu> lxb's url: [BarCamp Hong Kong 2013]
14:40 < hlb> lxb!
14:40 < hlb> 非常不好啊, 台灣 ping time 230ms :P
14:40 < lxb> 讀寫時間很爽沒錯，但打開網頁的延時還是不太妙。
14:40 < clkao> lxb: 已經開了一台... 用 SSDTWEET20 promo code
14:41 < lxb> ... 我來遲了。
14:42 < clkao> 我把 liquid feedback test box 搬過去好了
14:42 < tka_> lxb: 放玩具的話就不太介意拉
14:42 < clkao> 還好已經寫好 chef recipes.. :D
14:44 < lxb> 試試 ping hkday.net 吧，現在位置在 Singapore 的 OneAsiaHost ，整個東南亞都照顧到。
14:44 -!- KNY [~Adium@36-232-95-80.dynamic-ip.hinet.net] has quit [Quit: Leaving.]
14:44 < hlb> ~70ms..
14:45 < lxb> 我在馬來西亞和緬甸都試過，效果平均來說還可以。
14:45 < tka_> seednet 跟 tanet 差不多60~65
14:45 < clkao> 75ms from hinet
14:45 < lxb> 台灣有哪些比較好的 IaaS ?
14:46 < clkao> (   )
14:46 < tka_> 有嗎？
14:46 < hlb> 敢用嗎?
14:46 < lxb> 就是不知道喔…
14:46 < tka_> clkao: 快開一個 OpenDataCenter 好了
14:46 < lxb> 對啊，我不仲意立馬開單。
14:47 < lxb> s/仲/介/g
14:47 < lxb> ...orz 還是錯。
14:47 < lxb> 手殘了。
14:48 < clkao> hlb: 快開一個吧
14:48 < lxb> 我手底下有些 香港的 OpenStack VM
14:49 < lxb> 可以試 ping 49.213.1.37
14:49 < tka_> lxb: oneasiahost 的 KVM 方案有用過嗎？看起來價位跟 linode 差不多
14:50 < wens> clkao: 台灣太貴啦
14:50 < lxb> tka_: 比 linode 貴啦，而且坪台比 linode 弱了十二年…
14:50 < lxb> 但我仍是相信硬道理的…就是不可獨信一家。
14:50 < clkao> 沒 api 的都可以直接掰掰了
14:51 < tka_> lxb: 收到, 那亞洲區繼續用 linode :p
14:51 < tka_> 49.213.1.37 <35ms
14:51 < lxb> 目前 linode 亞洲我只留了兩顆 tokyo 的。還真希望他們搞個 hk ，不用我自己煩。
14:52 < lxb> tka_: 調得不錯吧 :D
14:52 < tka_> lxb: 贊!
14:52 -!- favonia [~favonia@pdpc/supporter/student/favonia] has joined #g0v.tw
14:53 < clkao> 怪了 我要 95ms 哩
14:53 -!- favonia [~favonia@pdpc/supporter/student/favonia] has quit [Read error: Connection reset by peer]
14:53 < lxb> 我不太理解台灣的 iDC 憑甚麼叫那麼貴哪…連電訊我也覺得貴，政治不知道那個是國家／國民戰略需要來的嗎？
14:53 < tka_> lxb: 不過台灣的學術網路會繞日本過去約 65ms #49.213.1.37
14:53 < lxb> orz...
14:54 < clkao> hinet 是進 cn?
14:55 < lxb> 那麼糟糕？
14:56 < tka_> seednet 是走 twgate 接 hkix 超快
14:56 < lxb> traceroute / pastebin 丟給我吧，我跟後台皮鞭一下…
14:57 -!- favonia [~favonia@pdpc/supporter/student/favonia] has joined #g0v.tw
14:58 < miaout17> favonia: 1.User可以更改所有欄位合理嗎？2.權限控制或CSRF？ REPLY> 我希望 hackpad 上新版 API 有避開之前發現的所有問題（哭）
15:00 < clkao> lxb: http://pastebin.com/fPNpQhMw
15:00 < kcwu> clkao's url: [\pre.local (0.0.0.0) - Pastebin.com]
15:00 < favonia> miaout17: CSRF 的意思是什麼？（確認一下）
15:01 < miaout17> http://en.wikipedia.org/wiki/Cross-site_request_forgery
15:01 < kcwu> miaout17's url: [Cross-site request forgery - Wikipedia, the free encyclopedia]
15:01 < miaout17> http://hackage.haskell.org/packages/archive/snap/0.8.1/doc/html/Snap-Snaplet-Session.html
15:02 < kcwu> miaout17's url: [Snap.Snaplet.Session]
15:02 < miaout17> Snap Session有些防CSRF的機制
15:03 < lxb> clkao: 謝謝，已轉交後台調理。
15:04 < favonia> miaout17: 老實講我個人覺得防不了耶。所以我只想顧好後端備份...
15:04 < favonia> 或是 commit log 之類的
15:04 < miaout17> 簡單來說都不防的話，第三方可以做個靜態頁面，用一些奇技淫巧(ex.Hidden iFrame+Form post)，讓看這個頁面的browser就隨機往API塞資料
15:04 < favonia> 剛才以為是我不知道的什麼新認証方法
15:05 < miaout17> 嗯…也OK啦
15:08 < favonia> miaout17: 我的意思不是不防
15:08 < favonia> 而是我不認為可以防住
15:08 < favonia> 等到哪天這個清單變空白再說 http://html5sec.org/
15:08 < kcwu> favonia's url: [HTML5 Security Cheatsheet]
15:08 -!- ck__ [~ck@61-31-166-245.dynamic.tfn.net.tw] has joined #g0v.tw
15:13 < kcwu> 看起來 html5sec 都在講若要讓人 submit html (或沒好好 escape)要怎麼寫 black list.
15:14 < favonia> kcwu: 還有一些是繞過 noscript 檢查的漏洞之類的
15:14 < kcwu> black list 是死路一條
15:16 < favonia> miaout17: 我的意思是說，我不想依賴任何前端檢查介面。不管哪裡來的 request, 就算是 https, 都直接視為潛在破壞者。一段時間過慮出破壞性編輯（delete 或是刪除字），然後 diff 一下我認為就可以了
15:16 < favonia> miaout17: 這是我個人意見啦 xD
15:17 < favonia> kcwu: 那網頁只是想反應出 html5 有多崩潰 xD
15:17 < favonia> kcwu: 還有另一個不用 JavaScript 也可以做到的一堆攻擊，連結找不到了
15:18 < kcwu> 用個會自動(or default)作 escape 的 template engine 吧
15:18 < favonia> kcwu: 我可以保證我們現在用的後端 *一定* 會 escape... 前端我不太清楚就是了 @@
15:21 < favonia> miaout17: 等一下我剛才誤解你的意思了
15:21 < favonia> miaout17: 我以為你是要防看另外一個邪惡網站上面偷偷用 JavaScript 亂塞資料之類的
15:22 < favonia> ㄝ等一下我沒看錯（我要睡覺了 orz）
15:22 < favonia> 總之我認為第3方一定有辦法做到...我現在對於web毫無信心xD
15:23 < mno2> favonia, kcwu:  this one? http://www.slideshare.net/x00mario/stealing-the-pie
15:23 < kcwu> mno2's url: [Scriptless Attacks - Stealing the Pie without touching the Sill]
15:23 < favonia> 我比較相信我用ssh登入在後端處理之類的
15:25 < favonia> mno2: 我想不論最後前端有沒有認証，該來研究後端 logger 怎麼寫比較好 xD
15:25 < mno2> favonia: indeed
15:25 < miaout17> favonia: 我覺得不擋也OK啦，的確不做權限控管的話誰都可以亂改，這只是一些初步的防禦。不過對一些比較成熟的web framework來說(Ex. Rails, Django, Play(?))，CSRF是不花額外力氣就可以擋掉的了。的確同意你說的後端log比較重要。
15:26 < favonia> miaout17: 不不他們都只能擋掉基本攻擊
15:26 < miaout17> kcwu: 嗯嗯，現在用Handlebars會escape > 個會自動(or default)作 escape 的 template engine 吧
15:27 < miaout17> 指前端
15:27 < favonia> miaout17: 另外如果要挑剔的話，session 不是很 RESTful
15:27 < favonia> 我對 RESTful 並不是很在意啦 xD
15:28 < favonia> 當初也是想耍酷才遵守那精神... 如果太麻煩就算了
15:30 < favonia> miaout17: 你看一下剛才投影片第21頁
15:30 < favonia> 有示範如何不用JavaScript偷CSRF token
15:30 < favonia> 所以基本防禦機制基本上都是無效的
15:31 < favonia> 只是別人沒有花這麼多時間來破壞沒有破壞價值的網站而已....
15:33 < favonia> 以上是我看了各種詭異攻擊後的心得 orz
15:35 < kcwu> scriptless 那篇, 雖然沒有 js, 但讓 user 可以 upload CSS, 這也是很糟的事
15:35 < miaout17> favonia: 我同意可以不擋啦。不過P.21那個攻擊是有form的頁面引入了攻擊者的CSS才能做到吧Ex. 像plurk或pixnet那些custom CSS的站
15:37 < favonia> miaout17: 不是耶。是像你講的第3方網頁
15:37 < favonia> 啊我知道了
15:37 < favonia> 嗯我想想看
15:37 < favonia> miaout17: 問題是你確定繞不過去嗎 xDDDDD
15:38 < favonia> kcwu: 不，不一定要 upload CSS
15:38 < miaout17> 一定要hacker可以動到form那頁的css吧
15:38 < kcwu> favonia: ex?
15:41 < miaout17> favonia: 不確定，但我正職是做Web後端的，至少會希望除了0day以外不會有其他洞XD 不過我的確同意encoding-mashup-server本來就是簡單的界面給任何人修改資料的，所以多做備份這些不擋也無所謂 > 問題是你確定繞不過去嗎 xDDDDD
15:47 < favonia> miaout17: ok
15:47 < kcwu> miaout17: 工作上也用 haskell ?
15:47 < miaout17> Ruby XD
15:48 < kcwu> XD
15:48 < miaout17> encoding-mashup-server backend大部份都是 favonia 寫的 XD
15:49 < favonia> miaout17: 有一大部份是 mno2 寫的... 不過現在大概又要重新規劃一下
15:49 < miaout17> Oh sorry for misinformation
15:50 < kcwu> 不知道現在 favonia 對 web 是不是比較有信心一點 XD
15:50 < favonia> kcwu: 唔沒有啊，我不信任目前 web 的安全機制 xD
15:51 < favonia> kcwu: 你講的狀況歷史上發生很多次（各種詭異方法把東西倒到 iframe 裡面），但現在應該沒有什麼明顯的洞
15:52 < kcwu> favonia: 那算到 0day 了, 沒有已知的洞....
15:52 < favonia> kcwu: 我對 web 不熟。我不敢宣稱沒有 0day 以外的 :P
15:54 < favonia> kcwu: 我沒有信心的原因是 web 的安全模型本來就很脆弱（設計上的問題），而不是實作小不小心的問題。
15:56 < favonia> 所以就算現在補到沒有已知的簡單入侵方法，這樣脆弱的架構難以說服我他是安全的
15:57 < kcwu> 這我很同意, 設計上的問題使得後面問題一堆, 雖然有解, 但解法一堆, 實作非常容易不小心, 也容易有新的 0day
15:59 < favonia> anyway 我並不反對前端的防治機制啦 xD 只是我想花更多力氣確定前端被破光光後，後端還是可以輕鬆回復
15:59 < favonia> 然後看看要不要維持很酷的 RESTful 標誌（我個人不在乎）
16:02 < favonia> miaout17: 剛好也符合現在的分工 xDDD
16:02 < favonia> 嗯除了認証和權限問題你有看到什麼其他 API 會炸掉的地方嗎
16:02 < favonia> 命名很差也可以講
16:03 < favonia> 我剛才想一下，也許給一般使用者刪掉字元很不合理... 拿掉好了 xD
16:03 < favonia> 只能從後端或是 localhost 砍
16:04 < favonia> 一些破壞性太大的 API 只能 localhost 存取
16:04 < clkao> 如果用 pg 的話，可以直接用 audit extension, 這樣所有的改動都會記下來 不用自己處理
16:05 < favonia> clkao: 嗯嗯
16:05 < lxb> 明白 favonia 的想法。
16:06 < clkao> wiki.postgresql.org/wiki/Audit_trigger_91plus # very handy
16:06 < favonia> clkao: mno2: http://hackage.haskell.org/package/snaplet-postgresql-simple xDDDD
16:06 < lxb> 我有時都想，反正被駭是必然的事，不如做點 honeypot 去請君入甕這樣子…駭人者人皆駭之。
16:07 < favonia> 看來只要改 import 就好了...
16:07 < lxb> 啊，對了，剛才在看 NHK 的 open project structure ... http://www.nhk.or.jp/strl/flexible/sousu.html
16:07 < kcwu> lxb's url: [フレキシブル制作システム ソースプログラム公開]
16:07 < favonia> （用 Haskell 最怕的就是 library 還沒有人寫，結果要自己重刻）
16:07 < favonia> lxb: honeypot 感覺好累 xD
16:21 -!- ck__ [~ck@61-31-166-245.dynamic.tfn.net.tw] has quit [Remote host closed the connection]
16:46 -!- KNY [~Adium@36-232-95-80.dynamic-ip.hinet.net] has joined #g0v.tw
16:48 -!- KN16H7_ [knight@saturn.stu.edu.tw] has joined #g0v.tw
16:48 -!- liic_ [~liic@alumni.cs.nctu.edu.tw] has joined #g0v.tw
16:48 -!- liic [~liic@alumni.cs.nctu.edu.tw] has quit [Read error: Connection reset by peer]
16:48 -!- susu [~cwshu@bsd1.cs.nctu.edu.tw] has quit [Read error: Connection reset by peer]
16:48 -!- allan914 [~cssuen@alumni.cs.nctu.edu.tw] has quit [Read error: Connection reset by peer]
16:48 -!- susu [~cwshu@bsd1.cs.nctu.edu.tw] has joined #g0v.tw
16:48 -!- KN16H7 [knight@saturn.stu.edu.tw] has quit [Read error: Connection reset by peer]
16:53 -!- allan914 [~cssuen@alumni.cs.nctu.edu.tw] has joined #g0v.tw
16:57 < au> kcwu: moedict.tw 左下角會連回原典了
16:57 < au> (<form accept-charset>)++
17:00 < kcwu> 原來有這招... 
17:00 < kcwu> au++
17:03 < kcwu> au: 用 search box 時, 左下角的 link 不會即時更新
17:03 < au> 也對
17:04 < clkao> http://www.moedict.tw/#神仙一把抓
17:04 < kcwu> clkao's url: [萌典 — 3du.tw 國語辭典]
17:04 < clkao> 每日新知
17:08 < au> kcwu: fixed
17:23 < hlb> clkao: 開什麼
17:23 < kcwu> open data center
17:24 < hlb> 台灣有什麼值得 open 的 data center  資訊?
17:31 -!- ck__ [~ck@61-31-166-245.dynamic.tfn.net.tw] has joined #g0v.tw
17:53 -!- ck__ [~ck@61-31-166-245.dynamic.tfn.net.tw] has quit [Remote host closed the connection]
18:25 -!- ck__ [~ck@61-31-166-245.dynamic.tfn.net.tw] has joined #g0v.tw
18:27 -!- KNY [~Adium@36-232-95-80.dynamic-ip.hinet.net] has quit [Quit: Leaving.]
18:44 -!- ck__ [~ck@61-31-166-245.dynamic.tfn.net.tw] has quit [Remote host closed the connection]
18:59 -!- KNY [~Adium@36-232-95-80.dynamic-ip.hinet.net] has joined #g0v.tw
19:00 -!- wHisKy [whisky@122-116-86-57.HINET-IP.hinet.net] has quit [Ping timeout: 255 seconds]
19:18 -!- mno2 [~mno2@1.34.43.236] has quit [Quit: Leaving]
19:19 -!- ck__ [~ck@61-31-166-245.dynamic.tfn.net.tw] has joined #g0v.tw
19:20 -!- mno2 [~mno2@1.34.43.236] has joined #g0v.tw
19:21 < kcwu> 有人在非 windows 平台可以看 http://ivod.ly.gov.tw/ 的影片嗎? 用什麼程式?
19:21 < kcwu> kcwu's url: [立法院 議事轉播 網際網路多媒體隨選視訊(ivod)系統]
19:28 < clkao> kcwu: flip4mac
19:42 -!- ck__ [~ck@61-31-166-245.dynamic.tfn.net.tw] has quit [Remote host closed the connection]
19:45 -!- yllan [~yllan@122-116-177-245.HINET-IP.hinet.net] has quit [Quit: yllan]
19:50 -!- wHisKy [whisky@1-160-245-122.dynamic.hinet.net] has joined #g0v.tw
20:12 -!- seudo_tw [r01944023@linux8.csie.ntu.edu.tw] has quit [Remote host closed the connection]
20:12 -!- V1ctor [r95017@linux1.csie.ntu.edu.tw] has quit [Remote host closed the connection]
20:12 -!- zealancer [b90057@linux1.csie.ntu.edu.tw] has quit [Remote host closed the connection]
20:28 -!- KNY [~Adium@36-232-95-80.dynamic-ip.hinet.net] has quit [Quit: Leaving.]
20:40 -!- wHisKy [whisky@1-160-245-122.dynamic.hinet.net] has quit [Ping timeout: 252 seconds]
20:44 -!- KNY [~Adium@36-232-95-80.dynamic-ip.hinet.net] has joined #g0v.tw
20:51 -!- wHisKy [whisky@1-160-244-222.dynamic.hinet.net] has joined #g0v.tw
21:05 -GitHub176:#g0v.tw- [twlyparser] chhsiao1981 opened pull request #18: Improve parse list (master...improve-parse-list)  https://github.com/g0v/twlyparser/pull/18
21:11 -!- superbil [~superbil@114-34-221-169.HINET-IP.hinet.net] has joined #g0v.tw
21:22 -!- ck_ [~ck@61-31-166-245.dynamic.tfn.net.tw] has joined #g0v.tw
21:28 < clkao> chhsiao1981: very confused by the pullreq... i think this new branch is base on the old branch, so the pullreq contains everything... might want to rebase a bit to separate the actual changes... 
21:31 -!- ck_ [~ck@61-31-166-245.dynamic.tfn.net.tw] has quit [Remote host closed the connection]
21:58 -!- wHisKy- [whisky@1-160-228-108.dynamic.hinet.net] has joined #g0v.tw
22:01 -!- wHisKy [whisky@1-160-244-222.dynamic.hinet.net] has quit [Ping timeout: 248 seconds]
22:06 -!- wHisKy- [whisky@1-160-228-108.dynamic.hinet.net] has quit []
22:10 < chhsiao1981> clkao: ok. no problem :D
22:21 < favonia> au: 想問一下，目前 ethercalc 的 RESTful API 有在防 CSRF 嗎？
22:24 < favonia> miaout17: 我想到一點，目前 CSRF 容易做 PUT 嗎？
22:25 < favonia> 還有 DELETE
22:25 < au> favonia: 之前甚至要加上 --cors，也就是歡迎 CSR，不用 F :)
22:26 < au> 所有的 audit log 都在 Redis 裡，要 undo 很容易，所以實在沒什麼好防的
22:27 < au> 然後 ethercalc protected mode 是用 HTTP Basic Auth 不是用 session
22:27 < au> 所以沒有 cookie 也就沒有 CSRF
22:27 < au> 大致如此。
22:28 < favonia> miaout17: 我覺得 DELETE 可以藏起來，反正一般使用者用不到。然後 PUT 我隨便 Google 的感覺，目前 CSRF 的技術似乎不容易做到（雖然我猜不知道什麼時候又有人發現方法...）。喔然後有些 framework 可以改 method, 我相信我們用的後端沒有允許這個 xD
22:28 < au> (ethercalc 沒有 cookie 也沒有 <form>，所以主要的 vector 不適用)
22:28 < favonia> 嗯嗯
22:29 < favonia> au: 最容易應用的應該是 POST /_/page?command=... 吧
22:29 < favonia> 如果真的要惡搞。這感覺是 form 可以做出來的格式
22:30 < au> *nod*
22:31 < au> 不過要救回來也很容易，undo 即可
22:31 < au> 本來 wiki 就是這樣
22:32 < favonia> 嗯主要是之前在討論前端介面 xD
22:32 < favonia> 好奇問一下 ethercalc 怎麼處理的
22:32 < au> OK
22:33 < au> 因為是 world writable 沒有登入，所以攻擊者想改什麼，自己通過 Tor 上去改比較快
22:33 < au> 不用假手他人
22:33 < au> 如果不是 world writable，那就都是用 HTTP Basic Auth，一般也沒辦法直接 POST
22:33 < au> .
22:34  * au 很習慣用 SSL+HTTP Auth (OAuth2 bearer token, Basic auth, etc)，已經很久沒有設計 cookie-based system 了
22:35 < kcwu> 若已經 HTTP basic auth login 過了, 就可以 CSRF 了?
22:35 < favonia> au: 不過我想只要用 GET, 瀏覽器還是會把登入的資訊一起送過去？
22:37 < au> kcwu: 剛測了一下，好像不會耶
22:38 < au> favonia: 只用 GET 要怎麼做修改呢
22:38 < favonia> favonia: 喔我的意思是說 POST 之類的也一樣
22:39 < favonia> au: 基本上是跟 kcwu 一樣的問題 xD
22:41 < au> 喔等一下，我看懂 kcwu 的問題了
22:41 < au> 意思是如果可以說服瀏覽器 cache basic auth 一次
22:41 < au> 就可以接著用 form 做 CSRF
22:42 < au> bearer token 目前沒有這個問題是因為，
22:42 < au> Authorization: OAuth2 XXXYYYZZZ # 這沒辦法放在 <form> 裡
22:43 < au> 但只靠 basic auth 加上 application/x-www-form-urlencoded 確實會有問題。
22:43 < favonia> miaout17: 我剛才看 jQuery 說明寫 "Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers." 你有經驗這到底是怎麼回事嗎 Q_Q 還是你都用 RoR 的 _method 覆蓋掉？
22:46 -!- ck_ [~ck@61-31-166-245.dynamic.tfn.net.tw] has joined #g0v.tw
22:46 < au> 這個世紀的瀏覽器 (IE6+) 都支援 PUT 和 DELETE 吧...?
22:47 < kcwu> 原來 IE6 是這個世紀的...
22:47  * kcwu flee
22:48 < au> XD
22:49 < favonia> au: 至少之前的版本可能有問題 http://stackoverflow.com/questions/12489582/put-method-not-working-in-google-chrome-through-ajax
22:49 < kcwu> favonia's url: [javascript - Put method not working in Google Chrome through AJAX - Stack Overflow]
22:51 < au> 這是 type:"PUT" 拼成 type:"put" 的結果嗎 XD
22:51 < favonia> 不知道耶，我猜應該不會因為這個有差別？
22:51 < favonia> 不過大概可以想辦法用 X-HTTP-Method-Override: PUT 之類的
22:52 < au> favonia: 等一下，stack overflow OP 說　
22:52 < au> The problem I was experiencing went away when I stopped using the "submit" event to transmit my form data, and instead relied on the "click" event. 
22:52 < au> So Eugene and OhgodWhy were correct. Chrome does have support for the "put" method in the XMLHTTPRequest object! 
22:52 < au> 所以並不是 chrome 有誤
22:52 < favonia> 喔對耶我丟太快 orz sorry
22:52 < au> np
22:53 < au> 應該可以不用考慮不支援的情況吧 XD
22:53 < favonia> 奇怪那 jQuery 到底在講什麼
22:53 < favonia> xD
22:55 < favonia> miaout17: 我想先自首現在 server 那邊我隨便亂寫 xD 下一版會只用 PUT. 我認為要用 PUT 而且要送合法的 JSON 不是簡單攻擊可以做到的。
22:56 < favonia> miaout17: 只支援 GET/PUT/DELETE
22:56 < favonia> 喔還有 HEAD (=GET)
23:04 -!- wHisKy [whisky@1-160-228-108.dynamic.hinet.net] has joined #g0v.tw
23:10 < au> ethercalc 更新成只支援 JSON POST (原本就有支援，只是拿掉 Form POST) 了。kcwu++ favonia++
23:12 < au> ...還好 express 會檢查 Content-Type，只讓 application/json 過。
23:14 < favonia> au: 你提醒我還有東西要檢查 xD 雖然 content-type 要惡搞好像有很多種方法
23:15 < au> <form> 不能改 Content-Type 吧?
23:17 < favonia> au: 希望不能...
23:19 < au> 似乎只能設成 "application/x-www-form-urlencoded" or "multipart/form-data" or "text/plain"
23:45 < favonia> miaout17: 我又擺了一些內容在 https://hackpad.com/3du.tw-Encoding-Mashup-Design-ozYEnChzp5w 上。我的想法是目前我們用的後端架構 Snap 沒有自動支援 _method 複寫，我想只要擋掉 POST 並檢查 content-type, 簡單的攻擊都會失效。我個人認為，再更複雜的攻擊就用後端暴力復原吧。
23:45 < kcwu> favonia's url: [3du.tw Encoding Mashup Design - hackpad.com]
23:51 < favonia> miaout17: 如果沒問題的話我要開始整個改寫 server 嚴格遵守新 API（之前都在亂搞）
23:51 < favonia> miaout17: 在這之前希望你可以檢查一下 xD 你比較有經驗 xD
